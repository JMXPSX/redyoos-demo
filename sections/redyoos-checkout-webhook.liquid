{% comment %}
  REDYOOS CHECKOUT WEBHOOK INTEGRATION
  
  This section handles sending jewelryItems sessionStorage data to a webhook
  when the user clicks the checkout button, then clears the sessionStorage.
  
  Purpose: Track jewelry items data during checkout process
  Integration: Invisible section that attaches to existing Shopify checkout button
  
  WEBHOOK CONFIGURATION:
  - Endpoint URL: https://webhook.site/50c62f38-7160-47fe-9cd8-76b3ad37d796
  - Method: POST
  - Payload: JSON with jewelryItems data and metadata
  
  FUNCTIONALITY:
  1. Intercepts clicks on #checkout button (main-cart-footer.liquid)
  2. Retrieves jewelryItems from sessionStorage
  3. Sends data to webhook endpoint
  4. Clears jewelryItems from sessionStorage
  5. Continues normal Shopify checkout process
  
  ERROR HANDLING:
  - Graceful fallback if webhook fails
  - Checkout process continues regardless
  - Console logging for debugging
{% endcomment %}

{% schema %}
{
  "name": "Redyoos Checkout Webhook",
  "settings": [
    {
      "type": "header",
      "content": "Webhook Configuration"
    },
    {
      "type": "text",
      "id": "webhook_url",
      "label": "Webhook Endpoint URL",
      "default": "https://webhook.site/50c62f38-7160-47fe-9cd8-76b3ad37d796",
      "info": "URL where jewelryItems data will be sent during checkout"
    },
    {
      "type": "checkbox",
      "id": "enable_logging",
      "label": "Enable Console Logging",
      "default": true,
      "info": "Enable debugging logs in browser console"
    }
  ],
  "presets": [
    {
      "name": "Redyoos Checkout Webhook",
      "category": "Redyoos"
    }
  ]
}
{% endschema %}

<!-- REDYOOS CHECKOUT WEBHOOK HANDLER -->
<!-- This section is invisible and only contains JavaScript functionality -->

<script>
document.addEventListener('DOMContentLoaded', function() {
  // =================================================================
  // REDYOOS CHECKOUT WEBHOOK INTEGRATION
  // =================================================================
  
  // Configuration
  const WEBHOOK_URL = {{ section.settings.webhook_url | json }};
  const ENABLE_LOGGING = {{ section.settings.enable_logging | json }};
  
  // Logging utility
  function log(message, data = null) {
    if (ENABLE_LOGGING) {
      if (data) {
        console.log(`[REDYOOS WEBHOOK] ${message}`, data);
      } else {
        console.log(`[REDYOOS WEBHOOK] ${message}`);
      }
    }
  }
  
  // =================================================================
  // JEWELRY ITEMS WEBHOOK FUNCTIONALITY
  // =================================================================
  
  /**
   * Sends jewelryItems sessionStorage data to webhook endpoint
   * @returns {Promise<boolean>} True if successful or should continue, false to halt
   */
  async function sendJewelryItemsToWebhook() {
    try {
      // Get jewelryItems from sessionStorage
      const jewelryItemsData = sessionStorage.getItem('jewelryItems');
      
      if (!jewelryItemsData) {
        log('No jewelryItems found in sessionStorage - continuing with checkout');
        return true; // Continue with checkout even if no jewelry data
      }

      const jewelryItems = JSON.parse(jewelryItemsData);
      log('Retrieved jewelryItems from sessionStorage', { count: jewelryItems.length, items: jewelryItems });

      // Generate unique correlation ID for matching with Shopify's orders/create webhook
      const correlationId = 'redyoos_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      const sessionId = sessionStorage.getItem('redyoos_session_id') || 
                       'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      
      // Store session ID for potential reuse
      sessionStorage.setItem('redyoos_session_id', sessionId);
      
      // Store correlation data for potential order matching
      const correlationData = {
        correlationId: correlationId,
        sessionId: sessionId,
        timestamp: new Date().toISOString(),
        jewelryItemsCount: jewelryItems.length,
        cartTotal: document.querySelector('.totals__total-value')?.textContent?.trim() || 'N/A'
      };
      sessionStorage.setItem('redyoos_correlation', JSON.stringify(correlationData));
      
      // Prepare webhook payload with correlation identifiers
      const payload = {
        // Correlation identifiers for matching with orders/create webhook
        correlationId: correlationId,
        sessionId: sessionId,
        checkoutTimestamp: new Date().toISOString(),
        
        // Event information
        event: 'jewelry_checkout_initiated',
        source: 'redyoos_shopify_cart',
        version: '1.0',
        
        // Jewelry data
        jewelryItems: jewelryItems,
        jewelryItemsCount: jewelryItems.length,
        jewelryItemsSummary: jewelryItems.map(item => 
          `${item.jewelry_type || 'jewelry'} ($${item.estimated_value_min}-$${item.estimated_value_max})`
        ).join(', '),
        
        // Cart and session metadata for correlation with Shopify order
        metadata: {
          // Browser/session data
          userAgent: navigator.userAgent,
          url: window.location.href,
          referrer: document.referrer,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          language: navigator.language,
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          
          // Cart correlation data
          cartTotal: document.querySelector('.totals__total-value')?.textContent?.trim() || 'N/A',
          cartItemCount: document.querySelectorAll('.cart-item').length || 0,
          
          // Extract cart line items for correlation
          cartLineItems: Array.from(document.querySelectorAll('.cart-item')).map(item => {
            const titleElement = item.querySelector('.cart-item__name');
            const priceElement = item.querySelector('.price');
            const quantityElement = item.querySelector('.quantity__input');
            
            return {
              title: titleElement?.textContent?.trim() || 'Unknown Product',
              price: priceElement?.textContent?.trim() || 'N/A',
              quantity: quantityElement?.value || '1',
              // Try to extract product ID from URLs or data attributes
              productUrl: titleElement?.getAttribute('href') || null
            };
          }),
          
          // Payment and shipping correlation points
          discounts: Array.from(document.querySelectorAll('.discounts__discount')).map(discount => 
            discount.textContent?.trim()
          ).filter(Boolean),
          
          // Cart form data that might help with correlation
          cartAttributes: (() => {
            const form = document.querySelector('#cart');
            if (!form) return {};
            
            const attributes = {};
            const hiddenInputs = form.querySelectorAll('input[name^="attributes"]');
            hiddenInputs.forEach(input => {
              const match = input.name.match(/attributes\[(.+)\]/);
              if (match) {
                attributes[match[1]] = input.value;
              }
            });
            return attributes;
          })()
        }
      };

      log('Sending payload to webhook', payload);

      // Use sendBeacon for reliable data sending during page navigation
      const success = navigator.sendBeacon(WEBHOOK_URL, JSON.stringify(payload));
      
      if (success) {
        log('Webhook sent successfully using sendBeacon');
        // Clear jewelryItems from sessionStorage after successful send
        sessionStorage.removeItem('jewelryItems');
        log('Cleared jewelryItems from sessionStorage');
      } else {
        log('SendBeacon failed, trying fetch as fallback');
        
        // Fallback to fetch with no-cors
        try {
          await fetch(WEBHOOK_URL, {
            method: 'POST',
            mode: 'no-cors',
            headers: {
              'Content-Type': 'application/json',
              'X-Webhook-Source': 'redyoos-checkout'
            },
            body: JSON.stringify(payload)
          });
          
          log('Fallback fetch completed');
          // Clear sessionStorage after fallback attempt
          sessionStorage.removeItem('jewelryItems');
          log('Cleared jewelryItems from sessionStorage');
          
        } catch (fetchError) {
          log('Fetch fallback also failed, but clearing sessionStorage anyway', fetchError);
          // Clear sessionStorage even if webhook fails to prevent repeated attempts
          sessionStorage.removeItem('jewelryItems');
          log('Cleared jewelryItems from sessionStorage (after failure)');
        }
      }
      
      return true;
    } catch (error) {
      log('Error in webhook process', error);
      return true; // Continue with checkout even if error occurs
    }
  }

  // =================================================================
  // CHECKOUT BUTTON INTERCEPTION
  // =================================================================
  
  /**
   * Enhances the existing Shopify checkout button with webhook functionality
   */
  function enhanceCheckoutButton() {
    const checkoutButton = document.querySelector('#checkout');
    
    if (!checkoutButton) {
      log('Checkout button (#checkout) not found - webhook integration skipped');
      return;
    }
    
    // Check if already enhanced to prevent duplicate handlers
    if (checkoutButton.hasAttribute('data-redyoos-enhanced')) {
      log('Checkout button already enhanced - skipping');
      return;
    }
    
    log('Found checkout button, adding webhook integration');
    
    // Mark as enhanced
    checkoutButton.setAttribute('data-redyoos-enhanced', 'true');
    
    // Add event listener to send webhook before checkout
    checkoutButton.addEventListener('click', async function(event) {
      log('Checkout button clicked - processing jewelryItems webhook');
      
      // Prevent default temporarily to ensure webhook completes
      event.preventDefault();
      event.stopImmediatePropagation();
      
      try {
        // Send webhook with a short timeout to avoid long delays
        const webhookPromise = sendJewelryItemsToWebhook();
        const timeoutPromise = new Promise(resolve => setTimeout(resolve, 1000)); // 1 second max
        
        // Wait for webhook to complete or timeout (whichever comes first)
        await Promise.race([webhookPromise, timeoutPromise]);
        
        log('Webhook processing complete - proceeding to checkout');
        
      } catch (error) {
        log('Webhook error (proceeding to checkout anyway)', error);
      }
      
      // Now proceed with checkout - use window.location to ensure navigation
      const cartForm = document.querySelector('#cart');
      if (cartForm) {
        // Get the form action URL (should be /cart)
        const formAction = cartForm.action || '/cart';
        
        // Submit form data to cart endpoint, then redirect to checkout
        const formData = new FormData(cartForm);
        
        try {
          // Submit cart form data
          await fetch(formAction, {
            method: 'POST',
            body: formData
          });
          
          // Then redirect to checkout
          window.location.href = '/checkout';
          
        } catch (error) {
          log('Cart submission error, trying direct checkout', error);
          // Fallback: direct checkout navigation
          window.location.href = '/checkout';
        }
      } else {
        // No form found, direct navigation
        window.location.href = '/checkout';
      }
      
    }, { capture: true }); // Use capture phase to fire before other handlers
    
    log('Checkout button webhook integration completed');
  }
  
  // =================================================================
  // INITIALIZATION
  // =================================================================
  
  // Wait for DOM to be fully loaded, then enhance checkout button
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', enhanceCheckoutButton);
  } else {
    enhanceCheckoutButton();
  }
  
  // Also try after a short delay in case elements are dynamically loaded
  setTimeout(enhanceCheckoutButton, 1000);
  
  log('Redyoos Checkout Webhook integration initialized');
});
</script>

<!-- 
  INTEGRATION INSTRUCTIONS:
  
  To activate this webhook integration:
  
  1. Add this section to your cart page:
     - Go to Shopify Admin > Online Store > Themes
     - Edit the active theme
     - Navigate to cart.json template
     - Add "redyoos-checkout-webhook" to the sections list
     
  2. Or add via theme customizer:
     - Go to cart page in theme customizer
     - Add section > Redyoos Checkout Webhook
     - Configure webhook URL if needed
     
  3. The section will automatically:
     - Attach to existing checkout button
     - Send jewelryItems data on checkout
     - Clear sessionStorage after successful send
     - Continue normal Shopify checkout process
     
  TROUBLESHOOTING:
  - Check browser console for "[REDYOOS WEBHOOK]" logs
  - Verify jewelryItems exists in sessionStorage
  - Test webhook endpoint URL separately
  - Ensure checkout button has id="checkout"
-->