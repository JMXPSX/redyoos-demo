{% comment %}
  REDYOOS ORDER ATTRIBUTES INTEGRATION
  
  This section adds jewelryItems sessionStorage data as Shopify order attributes
  so they flow through to the orders/create webhook payload.
  
  HOW IT WORKS:
  1. Reads jewelryItems from sessionStorage
  2. Dynamically adds hidden form fields to cart form (#cart)
  3. Data becomes part of order.attributes in Shopify webhooks
  4. Accessible in orders/create webhook payload
  
  ORDER ATTRIBUTES ADDED:
  - attributes[jewelryItems] = JSON string of all jewelry items
  - attributes[jewelryItemsCount] = number of jewelry items
  - attributes[jewelryItemsTimestamp] = when data was captured
  
  INTEGRATION: Add this section to cart.json to automatically inject
  jewelryItems data into the Shopify checkout process.
{% endcomment %}

{% schema %}
{
  "name": "Redyoos Order Attributes",
  "settings": [
    {
      "type": "header",
      "content": "Order Attributes Configuration"
    },
    {
      "type": "checkbox",
      "id": "enable_jewelry_attributes",
      "label": "Enable Jewelry Items Attributes",
      "default": true,
      "info": "Add jewelryItems sessionStorage data to order attributes"
    },
    {
      "type": "checkbox",
      "id": "enable_logging",
      "label": "Enable Console Logging",
      "default": true,
      "info": "Show debug information in browser console"
    },
    {
      "type": "text",
      "id": "attribute_prefix",
      "label": "Attribute Prefix",
      "default": "redyoos_",
      "info": "Prefix for order attribute names"
    }
  ],
  "presets": [
    {
      "name": "Redyoos Order Attributes",
      "category": "Redyoos"
    }
  ]
}
{% endschema %}

<!-- REDYOOS ORDER ATTRIBUTES INJECTOR -->
<!-- This section is invisible and only contains JavaScript functionality -->

<script>
document.addEventListener('DOMContentLoaded', function() {
  // =================================================================
  // REDYOOS ORDER ATTRIBUTES INTEGRATION
  // =================================================================
  
  // Configuration from section settings
  const ENABLE_JEWELRY_ATTRIBUTES = {{ section.settings.enable_jewelry_attributes | json }};
  const ENABLE_LOGGING = {{ section.settings.enable_logging | json }};
  const ATTRIBUTE_PREFIX = {{ section.settings.attribute_prefix | json }};
  
  // Logging utility
  function log(message, data = null) {
    if (ENABLE_LOGGING) {
      if (data) {
        console.log(`[REDYOOS ATTRIBUTES] ${message}`, data);
      } else {
        console.log(`[REDYOOS ATTRIBUTES] ${message}`);
      }
    }
  }
  
  // =================================================================
  // ORDER ATTRIBUTES INJECTION
  // =================================================================
  
  /**
   * Creates hidden input field for order attributes
   * @param {string} name - Attribute name
   * @param {string} value - Attribute value
   * @returns {HTMLInputElement} Hidden input element
   */
  function createAttributeInput(name, value) {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = `attributes[${ATTRIBUTE_PREFIX}${name}]`;
    input.value = value;
    input.className = 'redyoos-order-attribute';
    return input;
  }
  
  /**
   * Removes existing redyoos order attribute inputs
   */
  function clearExistingAttributes() {
    const existingInputs = document.querySelectorAll('.redyoos-order-attribute');
    existingInputs.forEach(input => input.remove());
    log('Cleared existing redyoos order attributes');
  }
  
  /**
   * Injects jewelryItems data as order attributes into cart form
   */
  function injectJewelryItemsAttributes() {
    if (!ENABLE_JEWELRY_ATTRIBUTES) {
      log('Jewelry attributes injection is disabled');
      return;
    }
    
    const cartForm = document.querySelector('#cart');
    if (!cartForm) {
      log('Cart form (#cart) not found - skipping attributes injection');
      return;
    }
    
    // Clear any existing attributes first
    clearExistingAttributes();
    
    try {
      // Get jewelryItems from sessionStorage
      const jewelryItemsData = sessionStorage.getItem('jewelryItems');
      
      if (!jewelryItemsData) {
        log('No jewelryItems found in sessionStorage - no attributes to inject');
        return;
      }
      
      const jewelryItems = JSON.parse(jewelryItemsData);
      log('Retrieved jewelryItems from sessionStorage', { count: jewelryItems.length, items: jewelryItems });
      
      // Create order attributes
      const attributes = [
        {
          name: 'jewelryItems',
          value: JSON.stringify(jewelryItems)
        },
        {
          name: 'jewelryItemsCount', 
          value: jewelryItems.length.toString()
        },
        {
          name: 'jewelryItemsTimestamp',
          value: new Date().toISOString()
        },
        {
          name: 'jewelryItemsSummary',
          value: jewelryItems.map(item => `${item.jewelry_type || 'jewelry'} ($${item.estimated_value_min}-$${item.estimated_value_max})`).join(', ')
        }
      ];
      
      // Inject attributes as hidden form fields
      attributes.forEach(attr => {
        const input = createAttributeInput(attr.name, attr.value);
        cartForm.appendChild(input);
        log(`Added order attribute: ${ATTRIBUTE_PREFIX}${attr.name}`, attr.value);
      });
      
      log(`Successfully injected ${attributes.length} jewelry attributes into cart form`);
      
    } catch (error) {
      log('Error injecting jewelryItems attributes', error);
    }
  }
  
  // =================================================================
  // DYNAMIC UPDATES
  // =================================================================
  
  /**
   * Monitors sessionStorage changes and updates attributes accordingly
   */
  function monitorSessionStorageChanges() {
    let lastJewelryData = sessionStorage.getItem('jewelryItems');
    
    setInterval(() => {
      const currentJewelryData = sessionStorage.getItem('jewelryItems');
      
      if (currentJewelryData !== lastJewelryData) {
        log('Detected change in jewelryItems sessionStorage - updating attributes');
        injectJewelryItemsAttributes();
        lastJewelryData = currentJewelryData;
      }
    }, 2000); // Check every 2 seconds
  }
  
  // =================================================================
  // FORM SUBMISSION ENHANCEMENT
  // =================================================================
  
  /**
   * Ensures attributes are fresh before form submission
   */
  function enhanceFormSubmission() {
    const cartForm = document.querySelector('#cart');
    if (!cartForm) return;
    
    cartForm.addEventListener('submit', function(event) {
      log('Cart form submission detected - ensuring fresh jewelryItems attributes');
      
      // Brief delay to allow for any last-minute sessionStorage updates
      setTimeout(() => {
        injectJewelryItemsAttributes();
      }, 10);
    });
    
    log('Enhanced cart form with pre-submission attribute refresh');
  }
  
  // =================================================================
  // INITIALIZATION
  // =================================================================
  
  /**
   * Initialize the order attributes system
   */
  function initializeOrderAttributes() {
    log('Initializing Redyoos Order Attributes system');
    
    // Initial injection
    injectJewelryItemsAttributes();
    
    // Monitor for changes
    monitorSessionStorageChanges();
    
    // Enhance form submission
    enhanceFormSubmission();
    
    // Re-inject after DOM changes (for dynamic cart updates)
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.target.id === 'cart') {
          log('Cart form DOM changed - re-injecting attributes');
          setTimeout(injectJewelryItemsAttributes, 100);
        }
      });
    });
    
    const cartForm = document.querySelector('#cart');
    if (cartForm) {
      observer.observe(cartForm, { childList: true, subtree: true });
    }
    
    log('Redyoos Order Attributes system initialized successfully');
  }
  
  // =================================================================
  // STARTUP
  // =================================================================
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeOrderAttributes);
  } else {
    initializeOrderAttributes();
  }
  
  // Also try after a delay for dynamic content
  setTimeout(initializeOrderAttributes, 1000);
});
</script>

<!-- 
  SHOPIFY ORDER WEBHOOK ACCESS:
  
  With this implementation, your jewelryItems data will be available in 
  Shopify's orders/create webhook payload under:
  
  {
    "order": {
      "attributes": [
        {
          "name": "redyoos_jewelryItems",
          "value": "[{\"jewelry_type\":\"ring\",\"estimated_value_min\":500,...}]"
        },
        {
          "name": "redyoos_jewelryItemsCount", 
          "value": "3"
        },
        {
          "name": "redyoos_jewelryItemsTimestamp",
          "value": "2024-01-15T10:30:00.000Z"
        },
        {
          "name": "redyoos_jewelryItemsSummary",
          "value": "ring ($500-$800), necklace ($300-$500), bracelet ($200-$400)"
        }
      ]
    }
  }
  
  INTEGRATION STEPS:
  1. Add this section to cart.json
  2. Set up Shopify webhook for orders/create
  3. Access order.attributes array in webhook payload
  4. Parse redyoos_jewelryItems JSON string for full data
  
  BENEFITS:
  - No modification of core Shopify files
  - Data flows through standard Shopify order system
  - Available in admin, emails, and all webhooks
  - Persistent with order record
-->