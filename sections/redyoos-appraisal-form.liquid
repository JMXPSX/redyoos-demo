{% comment %}
  This is the updated Shopify Liquid file for the appraisal form.
  It includes new HTML, CSS, and JavaScript to match the functionality
  and design shown in the appraisal-form.png image.
{% endcomment %}

{% schema %}
{
  "name": "Appraisal Form",
  "settings": [],
  "blocks": [],
  "presets": [
    {
      "name": "Appraisal Form"
    }
  ]
}
{% endschema %}

<section class="appraisal-form" id="redyoos_appraisal_form_n8dfCj">
  <div class="appraisal-container">
    <div class="appraisal-header">
      <h2 class="appraisal-title">
        <svg xmlns="http://www.w3.org/2000/svg" class="camera-icon icon icon-camera" aria-hidden="true" focusable="false" fill="none" viewBox="0 0 24 24">
          <path fill="currentColor" fill-rule="evenodd" d="M9.5 4a1.5 1.5 0 00-1.342.83L7.5 6H5a3 3 0 00-3 3v8a3 3 0 003 3h14a3 3 0 003-3V9a3 3 0 00-3-3h-2.5l-.658-1.17A1.5 1.5 0 0014.5 4h-5zm-2.5 5a1 1 0 011-1h8a1 1 0 011 1v8a1 1 0 01-1 1H8a1 1 0 01-1-1V9zm5 6a3 3 0 100-6 3 3 0 000 6zm0-1a2 2 0 100-4 2 2 0 000 4z"/>
        </svg>
        Upload Images
      </h2>
      <a href="#" class="upload-guide-link">
        <svg class="question-icon icon icon-info" aria-hidden="true" focusable="false" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M14.5 7C14.5 10.866 11.366 14 7.5 14C3.63401 14 0.5 10.866 0.5 7C0.5 3.13401 3.63401 0 7.5 0C11.366 0 14.5 3.13401 14.5 7ZM7.5 13.1737C10.9096 13.1737 13.6737 10.4096 13.6737 7C13.6737 3.59035 10.9096 0.826284 7.5 0.826284C4.09035 0.826284 1.32628 3.59035 1.32628 7C1.32628 10.4096 4.09035 13.1737 7.5 13.1737Z" fill="currentColor" fill-opacity="0.75"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M8.19189 3.55353C8.19189 3.16326 7.91572 2.82899 7.50163 2.82899C7.09256 2.82899 6.80626 3.15786 6.80626 3.55353C6.80626 3.94642 7.09511 4.27259 7.50163 4.27259C7.9132 4.27259 8.19189 3.94104 8.19189 3.55353Z" fill="currentColor" fill-opacity="0.75"/>
          <path d="M6.97141 5.72371C6.97141 5.54117 7.11938 5.3932 7.30192 5.3932H7.69854C7.88107 5.3932 8.02905 5.54117 8.02905 5.72371V10.8467C8.02905 11.0292 7.88107 11.1772 7.69854 11.1772H7.30192C7.11938 11.1772 6.97141 11.0292 6.97141 10.8467V5.72371Z" fill="currentColor" fill-opacity="0.75"/>
        </svg>
        See image upload guide
      </a>
    </div>

    <form class="appraisal-upload-form" enctype="multipart/form-data">
      <label for="appraisal-photos" class="upload-area">
        <svg class="upload-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
        </svg>
        <span class="upload-text">Click to upload images</span>
        <span class="upload-subtitle">Select 1-3 images (JPEG, PNG, WebP) • Maximum 10MB per image</span>
        <input 
          type="file" 
          id="appraisal-photos" 
          name="photos[]" 
          accept="image/jpeg, image/png, image/webp" 
          multiple 
          max="3" 
        >
      </label>

      <div id="image-preview-container">
        <div class="selected-images-header">
          <span id="image-count">Selected Images (0/3)</span>
          <button type="button" id="clear-all-btn" class="clear-all-btn">Clear All</button>
        </div>
        <div id="image-cards-container" class="image-cards-container">
          <!-- Image cards will be dynamically added here by JavaScript -->
        </div>
      </div>

      <div class="tips-section">
        <h3 class="instructions-title">Photo Tips for Better AI Appraisal:</h3>
        <ul class="upload-instructions">
          <li>Upload multiple images of one(1) jewelry piece from multiple angles</li>
          <li>Take photos in good lighting</li>
          <li>Include close-ups of markings and stamps</li>
          <li>Show different angles of the jewelry</li>
          <li>Include photos of any gemstones</li>
          <li>Use a plain background for contrast</li>
        </ul>
      </div>

      <button type="button" class="button button--full-width button--secondary analyze-btn" disabled>Analyze</button>
      
      <!-- Development Mode Indicator (only visible when USE_MOCK_API is true) -->
      <div id="mock-mode-indicator" class="mock-mode-indicator" style="display: none;">
        <span class="mock-icon">🔧</span>
        <span class="mock-text">Development Mode: Using Mock Data</span>
      </div>
    </form>
  </div>
</section>

<!-- Jewelry Limit Modal -->
<div id="jewelry-limit-modal" class="modal-overlay" style="display: none;" aria-hidden="true">
  <div class="modal-container jewelry-limit-modal-container" role="dialog" aria-labelledby="jewelry-limit-title" aria-modal="true">
    <div class="modal-header">
      <h2 id="jewelry-limit-title" class="modal-title">Maximum Jewelry Limit Reached</h2>
      <button type="button" class="modal-close-btn jewelry-limit-close" aria-label="Close modal">&times;</button>
    </div>
    
    <div class="modal-content">
      <div class="jewelry-limit-content">
        <div class="jewelry-limit-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
        </div>
        <p class="jewelry-limit-message">
          You have already uploaded <strong>3 jewelry items</strong>, which is the maximum allowed. 
          Please review your current jewelry items or remove one to add another.
        </p>
      </div>
    </div>
    
    <div class="modal-footer">
      <button type="button" class="jewelry-limit-cancel-btn">Cancel</button>
      <button type="button" class="jewelry-limit-review-btn">Review My Jewelry</button>
    </div>
  </div>
</div>

<!-- Image Upload Guide Modal -->
<div id="upload-guide-modal" class="modal-overlay" style="display: none;" aria-hidden="true">
  <div class="modal-container" role="dialog" aria-labelledby="modal-title" aria-modal="true">
    <div class="modal-header">
      <h2 id="modal-title" class="modal-title">Image Upload Guide</h2>
    </div>
    
    <div class="modal-content">
      <div class="examples-grid">
        <!-- Good Examples Column -->
        <div class="examples-column good-examples">
          <div class="column-header">
            <svg class="check-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
            <span>GOOD</span>
          </div>
          
          <div class="example-item">
            <img src="{{ 'Clear and High Quality.png' | asset_url }}" alt="Clear and high quality jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Clear and High Quality</p>
          </div>

          <div class="example-item">
            <img src="{{ 'Single item in focus.png' | asset_url }}" alt="Single item in focus jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Single Item in Focus</p>
          </div>

          <div class="example-item">
            <img src="{{ 'Show Detail and Angles.png' | asset_url }}" alt="Show details and angles jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Show details and angles</p>
          </div>

          <div class="example-item">
            <img src="{{ 'Clear Background.png' | asset_url }}" alt="Clear background jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Clear Background</p>
          </div>
        </div>
        
        <!-- Bad Examples Column -->
        <div class="examples-column bad-examples">
          <div class="column-header">
            <svg class="x-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
            <span>BAD</span>
          </div>
          
          <div class="example-item">
            <img src="{{ 'Blurry.png' | asset_url }}" alt="Blurry, dark and low quality jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Blurry, Dark and Low Quality</p>
          </div>

          <div class="example-item">
            <img src="{{ 'Multiple Items.png' | asset_url }}" alt="Multiple items jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Multiple Items</p>
          </div>

          <div class="example-item">
            <img src="{{ 'Partial view.png' | asset_url }}" alt="Partial view jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Partial view</p>
          </div>

          <div class="example-item">
            <img src="{{ 'Noisy Background.png' | asset_url }}" alt="Noisy background jewelry photo example" width="300" height="120" loading="lazy">
            <p class="example-label">Noisy Background</p>
          </div>
        </div>
      </div>
      
      <!-- Guidelines Section -->
      <div class="guidelines-section">
        <div class="guidelines-grid">
          <div class="guideline-column">
            <h3 class="guideline-title">Essential Photo Guidelines</h3>
            <div class="guideline-group">
              <h4 class="guideline-subtitle">Lighting Tips:</h4>
              <ul class="guideline-list">
                <li>Use natural daylight when possible</li>
                <li>Avoid harsh shadows</li>
                <li>No direct flash on reflective surfaces</li>
              </ul>
            </div>
            <div class="guideline-group">
              <h4 class="guideline-subtitle">Angle Suggestions:</h4>
              <ul class="guideline-list">
                <li>Front view of the piece</li>
                <li>Back/side views</li>
                <li>Close-up of any stamps or markings</li>
              </ul>
            </div>
          </div>
          
          <div class="guideline-column">
            <h3 class="guideline-title">Technical Requirements</h3>
            <div class="tech-requirements">
              <div class="tech-item">
                <span class="tech-label">File Format:</span>
                <span class="tech-value">JPEG, PNG, WebP</span>
              </div>
              <div class="tech-item">
                <span class="tech-label">File Size:</span>
                <span class="tech-value">Maximum 10MB per image</span>
              </div>
              <div class="tech-item">
                <span class="tech-label">Image Count:</span>
                <span class="tech-value">1-3 images per jewelry piece</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="modal-footer">
      <button type="button" class="button button--full-width button--primary got-it-btn">Close</button>
    </div>
  </div>
</div>

<!-- Image Overlay for Full Size Display -->
<div id="image-overlay" class="image-overlay">
  <button class="image-overlay-close" id="image-overlay-close">&times;</button>
  <img id="overlay-image" src="" alt="Full size reference image">
</div>

<style>
/* Global styles for the form */
.appraisal-form {
  padding: 40px 20px;
  min-height: 80vh;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  color: #333;
  background-color: #f8f9fa;
}

.appraisal-container {
  max-width: 700px;
  margin: 0 auto;
  padding: 30px;
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

/* Header styles - matching the design exactly */
.appraisal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.appraisal-title {
  font-size: 1.75rem;
  font-weight: 600;
  color: #1a202c;
  display: flex;
  align-items: center;
  margin: 0;
}

.camera-icon {
  width: 24px;
  height: 24px;
  color: rgb(var(--color-foreground));
  margin-right: 8px;
}

.upload-guide-link {
  font-size: 0.875rem;
  color: rgb(var(--color-foreground));
  text-decoration: none;
  display: flex;
  align-items: center;
  transition: all 0.2s ease-in-out;
  padding: 8px 12px;
  border: 1px solid rgb(var(--color-foreground));
  border-radius: 4px;
  background-color: transparent;
}

.upload-guide-link:hover {
  background-color: rgb(var(--color-foreground));
  color: rgb(var(--color-background));
  text-decoration: none;
}

.question-icon {
  width: 16px;
  height: 16px;
  color: currentColor;
  margin-right: 4px;
}

/* Upload area styles - matching the dashed border design */
.upload-area {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border: 2px dashed #d1d5db;
  padding: 60px 30px;
  margin-bottom: 25px;
  cursor: pointer;
  color: #666;
  transition: all 0.3s ease;
  border-radius: 8px;
  background-color: #fafafa;
  position: relative;
}

.upload-area:hover {
  background-color: #f3f4f6;
  border-color: rgb(var(--color-foreground));
}

.upload-area.has-files {
  border-color: #d7a636;
  background-color: #f7f7f7;
}

.upload-icon {
  width: 56px;
  height: 56px;
  color: #9ca3af;
  margin-bottom: 16px;
  stroke-width: 1.5;
}

.upload-text {
  font-size: 1.125rem;
  font-weight: 500;
  margin-bottom: 8px;
  color: #374151;
}

.upload-subtitle {
  font-size: 0.875rem;
  color: #6b7280;
  text-align: center;
  line-height: 1.4;
}

.upload-area input[type="file"] {
  position: absolute;
  opacity: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

/* Image preview section */
#image-preview-container {
  margin-bottom: 25px;
}

.selected-images-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
}

.clear-all-btn {
  background: none;
  border: none;
  color: rgb(var(--color-foreground));
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: color 0.2s ease;
}

.clear-all-btn:hover {
  color: rgb(var(--color-foreground), 0.7);
  text-decoration: underline;
}

.image-cards-container {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  justify-content: center;
}

.image-card {
  position: relative;
  width: 150px;
  height: 150px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.image-card img {
  width: 100%;
  height: 100px;
  object-fit: cover;
  display: block;
}

.image-card-footer {
  padding: 8px;
  font-size: 0.75rem;
  color: #6b7280;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  background-color: #f9fafb;
}

.remove-image-btn {
  position: absolute;
  top: 5px;
  right: 5px;
  width: 24px;
  height: 24px;
  background-color: rgb(var(--color-foreground));
  color: rgb(var(--color-background));
  border: none;
  border-radius: 50%;
  cursor: pointer;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease-in-out;
}

.remove-image-btn:hover {
  background-color: rgba(var(--color-foreground), 0.8);
}

/* Tips section - matching the Jewelry Recycling banner styling */
.tips-section {
  background-color: #f7f7f7;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 25px;
}

.instructions-title {
  font-size: 1rem;
  font-weight: 600;
  color: #1a202c;
  margin-bottom: 12px;
  margin-top: 0;
}

.upload-instructions {
  margin: 0;
  padding-left: 0;
  font-size: 0.875rem;
  color: #374151;
  list-style-type: none;
}

.upload-instructions li {
  margin-bottom: 6px;
  position: relative;
  padding-left: 20px;
  line-height: 1.4;
}

.upload-instructions li:before {
  content: "•";
  position: absolute;
  left: 0;
  color: #d7a636;
  font-weight: bold;
}

.upload-instructions li:last-child {
  margin-bottom: 0;
}

/* Analyze button - inherits from Shopify button classes */
.analyze-btn {
  margin-top: 20px;
}

.analyze-btn:disabled {
  background-color: #d1d5db;
  color: #9ca3af;
  cursor: not-allowed;
  opacity: 0.6;
}

/* Ensure text is readable during analysis transitions */
.analyze-btn.analyzing {
  background-color: #6b7280 !important;
  color: #ffffff !important;
  border-color: #6b7280 !important;
}

.analyze-btn.complete {
  background-color: #d7a636 !important;
  color: #ffffff !important;
  border-color: #d7a636 !important;
}

.analyze-btn.error {
  background-color: #ef4444 !important;
  color: #ffffff !important;
  border-color: #ef4444 !important;
}

/* Mock Mode Indicator */
.mock-mode-indicator {
  margin-top: 15px;
  padding: 12px 16px;
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  border: 1px solid #f59e0b;
  border-radius: 6px;
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.875rem;
  font-weight: 500;
  color: #92400e;
  box-shadow: 0 2px 4px rgba(245, 158, 11, 0.1);
}

.mock-icon {
  font-size: 1rem;
}

.mock-text {
  flex: 1;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.75);
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

.modal-overlay.show {
  opacity: 1;
  visibility: visible;
}

.modal-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  max-width: 900px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  transform: scale(0.95);
  transition: transform 0.3s ease;
}

.modal-overlay.show .modal-container {
  transform: scale(1);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px 30px 20px;
  border-bottom: 1px solid #e5e7eb;
}

.modal-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1a202c;
  margin: 0;
}

.modal-close-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #6b7280;
  cursor: pointer;
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
  transition: background-color 0.2s ease, color 0.2s ease;
}

.modal-close-btn:hover {
  background-color: #f3f4f6;
  color: #374151;
}

.modal-content {
  padding: 20px 30px;
}

/* Examples Grid */
.examples-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 30px;
}

.examples-column {
  border-radius: 8px;
  overflow: hidden;
}

.good-examples {
  background-color: #f0fdf4;
  border: 1px solid #bbf7d0;
}

.bad-examples {
  background-color: #fef2f2;
  border: 1px solid #fecaca;
}

.column-header {
  padding: 12px 16px;
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 600;
  font-size: 0.875rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.good-examples .column-header {
  background-color: #dcfce7;
  color: #166534;
}

.bad-examples .column-header {
  background-color: #fee2e2;
  color: #991b1b;
}

.check-icon, .x-icon {
  width: 16px;
  height: 16px;
}

.example-item {
  padding: 16px;
  border-top: 1px solid;
  transition: background-color 0.3s ease;
}

.example-item:hover {
  background-color: rgba(255, 255, 255, 0.7);
}

.good-examples .example-item {
  border-color: #bbf7d0;
}

.bad-examples .example-item {
  border-color: #fecaca;
}

.example-item img {
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-radius: 6px;
  margin-bottom: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
}

.example-item img:hover {
  transform: scale(1.02);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Full Image Overlay */
.image-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
  padding: 20px;
  box-sizing: border-box;
}

.image-overlay.show {
  opacity: 1;
  visibility: visible;
}

.image-overlay img {
  max-width: 90%;
  max-height: 90%;
  width: auto;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  object-fit: contain;
}

.image-overlay-close {
  position: absolute;
  top: 20px;
  right: 30px;
  color: white;
  font-size: 40px;
  font-weight: bold;
  cursor: pointer;
  z-index: 1001;
  transition: color 0.3s ease;
  background: none;
  border: none;
  padding: 10px;
  line-height: 1;
}

.image-overlay-close:hover {
  color: #ccc;
}

.example-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
  margin: 0;
  text-align: center;
}

/* Guidelines Section */
.guidelines-section {
  background-color: #f8fafc;
  border-radius: 8px;
  padding: 20px;
}

.guidelines-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 30px;
}

.guideline-title {
  font-size: 1rem;
  font-weight: 600;
  color: #1a202c;
  margin: 0 0 16px 0;
}

.guideline-group {
  margin-bottom: 20px;
}

.guideline-group:last-child {
  margin-bottom: 0;
}

.guideline-subtitle {
  font-size: 0.875rem;
  font-weight: 600;
  color: #374151;
  margin: 0 0 8px 0;
}

.guideline-list {
  margin: 0;
  padding-left: 16px;
  font-size: 0.8125rem;
  color: #4b5563;
  line-height: 1.5;
}

.guideline-list li {
  margin-bottom: 4px;
}

.guideline-list li:last-child {
  margin-bottom: 0;
}

.tech-requirements {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.tech-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 12px;
  background-color: white;
  border-radius: 6px;
  border: 1px solid #e5e7eb;
}

.tech-label {
  font-size: 0.8125rem;
  font-weight: 500;
  color: #6b7280;
}

.tech-value {
  font-size: 0.8125rem;
  font-weight: 600;
  color: #374151;
}

.modal-footer {
  padding: 20px 30px 24px;
  border-top: 1px solid #e5e7eb;
  display: flex;
  justify-content: center;
}

.got-it-btn.button--primary {
  /* Primary button styling handled by Shopify classes */
}

.got-it-btn:not(.button) {
  /* Fallback for buttons without Shopify classes */
  background-color: #d10077;
  color: white;
  border: none;
  padding: 12px 32px;
  border-radius: 6px;
  font-size: 0.9375rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease;
  min-width: 120px;
}

.got-it-btn:not(.button):hover {
  background-color: #a3005a;
}

/* Jewelry Limit Modal Styles */
.jewelry-limit-modal-container {
  max-width: 500px;
}

.jewelry-limit-content {
  text-align: center;
  padding: 20px 0;
}

.jewelry-limit-icon {
  display: flex;
  justify-content: center;
  margin-bottom: 16px;
}

.jewelry-limit-icon svg {
  width: 48px;
  height: 48px;
  color: #f59e0b;
}

.jewelry-limit-message {
  font-size: 1rem;
  color: #374151;
  line-height: 1.6;
  margin: 0;
}

.jewelry-limit-message strong {
  color: #1f2937;
}

.modal-footer {
  display: flex;
  gap: 12px;
  justify-content: center;
}

.jewelry-limit-cancel-btn {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 6px;
  font-size: 0.9375rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease;
  min-width: 100px;
}

.jewelry-limit-cancel-btn:hover {
  background-color: #5a6268;
}

.jewelry-limit-review-btn {
  background-color: #d10077;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 6px;
  font-size: 0.9375rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease;
  min-width: 140px;
}

.jewelry-limit-review-btn:hover {
  background-color: #a3005a;
}

/* Modal Responsive Design */
@media (max-width: 768px) {
  .modal-overlay {
    padding: 10px;
  }
  
  .modal-header {
    padding: 20px 20px 16px;
  }
  
  .modal-content {
    padding: 16px 20px;
  }
  
  .modal-footer {
    padding: 16px 20px 20px;
  }
  
  .modal-title {
    font-size: 1.25rem;
  }
  
  .examples-grid {
    grid-template-columns: 1fr;
    gap: 16px;
    margin-bottom: 24px;
  }
  
  .guidelines-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .example-item img {
    height: 100px;
  }
}

@media (max-width: 480px) {
  .modal-header {
    padding: 16px 16px 12px;
  }
  
  .modal-content {
    padding: 12px 16px;
  }
  
  .modal-footer {
    padding: 12px 16px 16px;
  }
  
  .example-item {
    padding: 12px;
  }
  
  .guidelines-section {
    padding: 16px;
  }
}

/* Responsive design */
@media (max-width: 768px) {
  .appraisal-form {
    padding: 20px 15px;
  }
  
  .appraisal-container {
    padding: 20px;
  }
  
  .appraisal-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
    margin-bottom: 25px;
  }
  
  .upload-guide-link {
    align-self: flex-end;
  }
  
  .appraisal-title {
    font-size: 1.5rem;
  }
  
  .upload-area {
    padding: 40px 20px;
  }
  
  .image-cards-container {
    justify-content: flex-start;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Get all necessary DOM elements
  const photoInput = document.getElementById('appraisal-photos');
  const uploadArea = document.querySelector('.upload-area');
  const imageCardsContainer = document.getElementById('image-cards-container');
  const imageCountSpan = document.getElementById('image-count');
  const clearAllBtn = document.getElementById('clear-all-btn');
  const analyzeBtn = document.querySelector('.analyze-btn');
  const appraisalFormSection = document.getElementById('redyoos_appraisal_form_n8dfCj');

  const MAX_FILES = 3;
  const MAX_JEWELRY_ITEMS = 3;
  let selectedFiles = [];

  // Function to get current jewelry items count from sessionStorage
  const getJewelryItemsCount = () => {
    try {
      const jewelryItems = sessionStorage.getItem('jewelryItems');
      return jewelryItems ? JSON.parse(jewelryItems).length : 0;
    } catch (error) {
      console.error('Error getting jewelry items count:', error);
      return 0;
    }
  };

  // Function to check if user can add more jewelry items
  const canAddMoreJewelry = () => {
    return getJewelryItemsCount() < MAX_JEWELRY_ITEMS;
  };

  // Function to show jewelry limit modal
  const showJewelryLimitModal = () => {
    const modal = document.getElementById('jewelry-limit-modal');
    if (modal) {
      modal.style.display = 'flex';
      modal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      
      // Add show class after a brief delay for smooth animation
      setTimeout(() => {
        modal.classList.add('show');
      }, 10);
      
      // Focus on the close button for accessibility
      const closeBtn = modal.querySelector('.jewelry-limit-close');
      if (closeBtn) closeBtn.focus();
    }
  };

  // Function to hide jewelry limit modal
  const hideJewelryLimitModal = () => {
    const modal = document.getElementById('jewelry-limit-modal');
    if (modal) {
      modal.classList.remove('show');
      
      // Wait for animation to complete before hiding
      setTimeout(() => {
        modal.style.display = 'none';
        modal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
      }, 300);
    }
  };

  // Function to render the image previews and update the UI
  const renderImages = () => {
    imageCardsContainer.innerHTML = '';
    
    const fileCount = selectedFiles.length;
    imageCountSpan.textContent = `Selected Images (${fileCount}/${MAX_FILES})`;
    clearAllBtn.style.display = fileCount > 0 ? 'block' : 'none';
    analyzeBtn.disabled = fileCount === 0;

    // Update upload area appearance
    if (fileCount > 0) {
      uploadArea.classList.add('has-files');
    } else {
      uploadArea.classList.remove('has-files');
    }

    if (fileCount >= MAX_FILES) {
      uploadArea.style.pointerEvents = 'none';
      uploadArea.style.opacity = '0.6';
    } else {
      uploadArea.style.pointerEvents = 'auto';
      uploadArea.style.opacity = '1';
    }

    selectedFiles.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const card = document.createElement('div');
        card.className = 'image-card';
        card.innerHTML = `
          <img src="${e.target.result}" alt="Preview of ${file.name}">
          <button type="button" class="remove-image-btn" data-index="${index}">&times;</button>
          <div class="image-card-footer">${file.name}</div>
        `;
        imageCardsContainer.appendChild(card);
      };
      reader.readAsDataURL(file);
    });
  };

  // Handle file selection
  photoInput.addEventListener('change', (event) => {
    // Check jewelry limit first
    if (!canAddMoreJewelry()) {
      showJewelryLimitModal();
      photoInput.value = '';
      return;
    }

    const newFiles = Array.from(event.target.files);
    const remainingSlots = MAX_FILES - selectedFiles.length;
    
    if (newFiles.length > remainingSlots) {
      alert(`You can only upload ${remainingSlots} more image(s). Maximum ${MAX_FILES} images allowed.`);
      photoInput.value = ''; 
      return;
    }

    // Validate file types and sizes
    const validFiles = [];
    for (const file of newFiles) {
      if (!file.type.match(/^image\/(jpeg|jpg|png|webp)$/i)) {
        alert(`File "${file.name}" is not a valid image format. Please select JPEG, PNG, or WebP images only.`);
        continue;
      }
      
      if (file.size > 10 * 1024 * 1024) { // 10MB
        alert(`File "${file.name}" is too large. Maximum file size is 10MB.`);
        continue;
      }
      
      validFiles.push(file);
    }

    selectedFiles = [...selectedFiles, ...validFiles];
    renderImages();
    photoInput.value = '';
  });

  // Handle drag and drop
  uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.style.backgroundColor = '#f3f4f6';
    uploadArea.style.borderColor = '#d10077';
  });

  uploadArea.addEventListener('dragleave', (e) => {
    e.preventDefault();
    uploadArea.style.backgroundColor = '#fafafa';
    uploadArea.style.borderColor = '#d1d5db';
  });

  uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadArea.style.backgroundColor = '#fafafa';
    uploadArea.style.borderColor = '#d1d5db';
    
    // Check jewelry limit first
    if (!canAddMoreJewelry()) {
      showJewelryLimitModal();
      return;
    }
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length + selectedFiles.length > MAX_FILES) {
      alert(`You can only upload a maximum of ${MAX_FILES} images.`);
      return;
    }
    
    // Trigger the same validation as file input
    const dt = new DataTransfer();
    files.forEach(file => dt.items.add(file));
    photoInput.files = dt.files;
    
    const event = new Event('change', { bubbles: true });
    photoInput.dispatchEvent(event);
  });

  // Remove single image
  imageCardsContainer.addEventListener('click', (event) => {
    if (event.target.classList.contains('remove-image-btn')) {
      const indexToRemove = parseInt(event.target.dataset.index);
      selectedFiles.splice(indexToRemove, 1);
      renderImages();
    }
  });

  // Clear all images
  clearAllBtn.addEventListener('click', () => {
    selectedFiles = [];
    renderImages();
  });

  // AWS API Configuration
  // const AWS_ENDPOINT = 'https://redyoos-alb-551718781.ap-southeast-1.elb.amazonaws.com/appraise';
  const AWS_ENDPOINT = 'https://redyoos-demo.bountiply.app/appraise';
  const API_TIMEOUT = 60000; // 60 seconds timeout (increased for large file processing)
  
  // Mock API Configuration - Set to true to use mock data during development
  const USE_MOCK_API = false;
  
  // Mock response data matching the expected API structure
  const getMockAppraisalResponse = () => {
    // Add some random variation to simulate different jewelry pieces
    const baseValue = Math.floor(Math.random() * 1000) + 500; // $500-$1500 base
    const variation = Math.random() * 0.3 + 0.85; // 85%-115% variation
    const minValue = Math.floor(baseValue * variation);
    const maxValue = Math.floor(minValue * 1.2);
    
    const jewelryTypes = ['ring', 'necklace', 'bracelet', 'earrings', 'watch', 'pendant'];
    const metalTypes = ['gold', 'silver', 'platinum'];
    const conditions = ['excellent', 'very good', 'good', 'fair'];
    const gemstoneOptions = ['diamond', 'ruby', 'sapphire', 'emerald', 'none', 'mixed stones'];
    const goldPurities = ['10K', '14K', '18K', '22K', '24K'];
    
    const selectedMetalType = metalTypes[Math.floor(Math.random() * metalTypes.length)];
    
    const result = {
      estimated_value_min: minValue,
      estimated_value_max: maxValue,
      jewelry_type: jewelryTypes[Math.floor(Math.random() * jewelryTypes.length)],
      metalType: selectedMetalType,
      weight: (Math.random() * 50 + 5).toFixed(1) + "g",
      condition: conditions[Math.floor(Math.random() * conditions.length)],
      gemstones: gemstoneOptions[Math.floor(Math.random() * gemstoneOptions.length)],
      description: "Analyzed jewelry piece with detailed visual inspection",
      markings: Math.random() > 0.5 ? "14K" : "925",
      confidence: Math.floor(Math.random() * 20) + 80, // 80-99% confidence
      metalPercentage: Math.floor(Math.random() * 30) + 70, // 70-99% metal percentage
      clip_flags: Math.random() > 0.7 ? ["high_quality"] : []
    };
    
    // Add purity field only for Gold Metal Type
    if (selectedMetalType === 'gold') {
      result.purity = goldPurities[Math.floor(Math.random() * goldPurities.length)];
    }
    
    // Generate dynamic metal prices (simulating real API behavior)
    const baseGoldPrice = 3600; // Base around $3600/oz
    const baseSilverPrice = 40;  // Base around $40/oz  
    const basePlatinumPrice = 1380; // Base around $1380/oz
    
    // Add some random variation (±2%) to simulate market fluctuations
    const goldVariation = (Math.random() - 0.5) * 0.04; // ±2%
    const silverVariation = (Math.random() - 0.5) * 0.04; // ±2%
    const platinumVariation = (Math.random() - 0.5) * 0.04; // ±2%
    
    const dynamicMetalPrices = {
      gold: parseFloat((baseGoldPrice * (1 + goldVariation)).toFixed(2)),
      silver: parseFloat((baseSilverPrice * (1 + silverVariation)).toFixed(2)),
      platinum: parseFloat((basePlatinumPrice * (1 + platinumVariation)).toFixed(2)),
      timestamp: new Date().toISOString(),
      source: "Mock API (Yahoo Finance)"
    };
    
    return {
      success: true,
      message: "Appraisal completed successfully",
      result: result,
      metal_prices: dynamicMetalPrices
    };
  };
  
  // Function to call AWS appraisal endpoint with retry mechanism
  const callAwsAppraisalAPI = async (files, retryCount = 0) => {
    const MAX_RETRIES = 2;
    
    // Check if we should use mock data
    if (USE_MOCK_API) {
      console.log('🔧 DEVELOPMENT MODE: Using mock API response');
      
      // Validate files before proceeding (same validation as real API)
      if (!files || files.length === 0) {
        throw new Error('No files to analyze');
      }
      
      // Simulate API delay (2-4 seconds)
      const mockDelay = Math.random() * 2000 + 2000;
      await new Promise(resolve => setTimeout(resolve, mockDelay));
      
      // Generate and return mock response
      const mockResponse = getMockAppraisalResponse();
      console.log('📝 Mock API Response:', mockResponse);
      
      return {
        success: true,
        data: mockResponse
      };
    }
    
    try {
      // Validate files before sending
      if (!files || files.length === 0) {
        throw new Error('No files to analyze');
      }
      
      // Create FormData for multipart upload
      const formData = new FormData();
      
      // Add each file to the form data
      files.forEach((file, index) => {
        // Validate file type and size again before sending
        if (!file.type.match(/^image\/(jpeg|jpg|png|webp)$/i)) {
          throw new Error(`Invalid file type: ${file.name}`);
        }
        
        if (file.size > 10 * 1024 * 1024) { // 10MB limit
          throw new Error(`File too large: ${file.name}`);
        }
        
        formData.append('images', file, file.name);
      });
      
      // Add timestamp for request tracking
      formData.append('timestamp', Date.now().toString());
      
      // Create abort controller for timeout handling
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);
      
      console.log('Sending request to AWS endpoint:', AWS_ENDPOINT);
      console.log('Files being sent:', files.map(f => ({ name: f.name, size: f.size, type: f.type })));
      
      // Make the API call with enhanced headers for CORS
      const response = await fetch(AWS_ENDPOINT, {
        method: 'POST',
        body: formData,
        signal: controller.signal,
        mode: 'cors', // Explicitly set CORS mode
        credentials: 'same-origin', // Don't send credentials for security
        headers: {
          // Don't set Content-Type header - browser will set it automatically with boundary for FormData
          // Add custom headers that might help with CORS
          'X-Requested-With': 'XMLHttpRequest',
        }
      });
      
      clearTimeout(timeoutId);
      
      // Check if response is ok
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
      }
      
      // Parse JSON response
      const responseData = await response.json();
      
      console.log('AWS API Response:', responseData);
      console.log('AWS API Response structure check:');
      console.log('- Has result:', !!responseData.result);
      console.log('- Has metal_prices:', !!responseData.metal_prices);
      console.log('- Response keys:', Object.keys(responseData));
      
      return {
        success: true,
        data: responseData
      };
      
    } catch (error) {
      console.error('AWS API Error:', error);
      
      // Check if this is a retryable error and we haven't exceeded max retries
      const isRetryableError = error.name === 'AbortError' || 
                               error.message.includes('fetch') || 
                               (error instanceof TypeError && error.message.includes('fetch'));
      
      if (isRetryableError && retryCount < MAX_RETRIES) {
        console.log(`Retrying request (attempt ${retryCount + 1} of ${MAX_RETRIES})`);
        // Wait 2 seconds before retrying, then double the wait time for each retry
        await new Promise(resolve => setTimeout(resolve, 2000 * Math.pow(2, retryCount)));
        return callAwsAppraisalAPI(files, retryCount + 1);
      }
      
      // Handle different error types
      if (error.name === 'AbortError') {
        return {
          success: false,
          error: `Request timeout after ${retryCount + 1} attempts - please try again`,
          type: 'timeout'
        };
      }
      
      // Check for CORS-related errors
      if (error.message.includes('CORS') || 
          error.message.includes('Cross-Origin') ||
          error.message.includes('Failed to fetch') ||
          (error instanceof TypeError && error.message.includes('fetch'))) {
        console.warn('CORS error detected. The AWS endpoint may not be configured to accept requests from this domain.');
        return {
          success: false,
          error: 'Unable to connect to analysis service due to security restrictions',
          type: 'cors'
        };
      }
      
      if (error.message.includes('fetch') || error instanceof TypeError) {
        return {
          success: false,
          error: `Network error after ${retryCount + 1} attempts - please check your connection`,
          type: 'network'
        };
      }
      
      return {
        success: false,
        error: error.message,
        type: 'general'
      };
    }
  };
  
  // Function to serialize images for SessionStorage
  const serializeImages = async (files) => {
    const serializedImages = [];
    
    for (const file of files) {
      try {
        // Convert file to base64 data URL
        const dataUrl = await new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });
        
        // Store file metadata along with data
        serializedImages.push({
          name: file.name,
          size: file.size,
          type: file.type,
          dataUrl: dataUrl,
          lastModified: file.lastModified
        });
      } catch (error) {
        console.error('Error serializing image:', file.name, error);
      }
    }
    
    return serializedImages;
  };

  // Function to update UI based on API response
  const handleApiResponse = async (result) => {
    if (result.success) {
      // Success - show success message and redirect
      analyzeBtn.textContent = 'Analysis Complete! Redirecting...';
      analyzeBtn.classList.remove('analyzing', 'error');
      analyzeBtn.classList.add('complete');
      
      // Store the appraisal result in sessionStorage for the metal calculator page
      if (result.data && result.data.result) {
        const appraisalResult = result.data.result;
        
        // Extract metal_prices from the AWS API response 
        // The metal_prices should be at the same level as result in the response
        if (result.data && result.data.metal_prices) {
          console.log('Found metal_prices in AWS API response:', result.data.metal_prices);
          
          // Dynamically parse metal prices from AWS API response
          const metalPricesData = result.data.metal_prices;
          appraisalResult.metalPrices = {
            gold: (metalPricesData.gold !== undefined && !isNaN(parseFloat(metalPricesData.gold))) ? parseFloat(metalPricesData.gold) : 0.00,
            silver: (metalPricesData.silver !== undefined && !isNaN(parseFloat(metalPricesData.silver))) ? parseFloat(metalPricesData.silver) : 0.00,
            platinum: (metalPricesData.platinum !== undefined && !isNaN(parseFloat(metalPricesData.platinum))) ? parseFloat(metalPricesData.platinum) : 0.00
          };
          
          console.log('Successfully extracted metal prices from AWS API:', appraisalResult.metalPrices);
          
          // Log additional metadata if available
          if (metalPricesData.timestamp) {
            console.log('Metal prices timestamp from AWS:', metalPricesData.timestamp);
          }
          if (metalPricesData.source) {
            console.log('Metal prices source from AWS:', metalPricesData.source);
          }
        } else {
          // No metal_prices in AWS API response
          console.warn('Warning: No metal_prices found in AWS API response, using 0.00 values');
          appraisalResult.metalPrices = {
            gold: 0.00,
            silver: 0.00,
            platinum: 0.00
          };
        }
        
        sessionStorage.setItem('appraisalResult', JSON.stringify(appraisalResult));
      }
      
      // Store uploaded images in sessionStorage for the value calculator page
      if (selectedFiles.length > 0) {
        try {
          const serializedImages = await serializeImages(selectedFiles);
          sessionStorage.setItem('uploadedImages', JSON.stringify(serializedImages));
          console.log('Stored', serializedImages.length, 'images in sessionStorage');
        } catch (error) {
          console.error('Error storing images in sessionStorage:', error);
        }
      }
      
      // Redirect to metal value calculator after 2 seconds
      setTimeout(() => {
        window.location.href = '/pages/value-calculator';
      }, 2000);
      
    } else {
      // Error - show error message
      analyzeBtn.textContent = 'Analysis Failed - Try Again';
      analyzeBtn.classList.remove('analyzing', 'complete');
      analyzeBtn.classList.add('error');
      
      // Show user-friendly error message
      const errorMessages = {
        timeout: 'Analysis timed out after 60 seconds. Your images may be too large or the service is busy. Please try again with smaller images or wait a few minutes.',
        network: 'Unable to connect to the analysis service. Please check your internet connection and try again.',
        cors: 'The analysis service is not configured to accept requests from this website. Please contact support.',
        general: result.error || 'An error occurred during analysis. Please try again or contact support if the problem persists.'
      };
      
      const userMessage = errorMessages[result.type] || errorMessages.general;
      
      // You could show this in a toast/alert, for now we'll use console and button text
      console.warn('User-friendly error:', userMessage);
      
      setTimeout(() => {
        // Reset button after 5 seconds
        analyzeBtn.textContent = 'Analyze';
        analyzeBtn.classList.remove('analyzing', 'complete', 'error');
        analyzeBtn.disabled = false;
      }, 5000);
    }
  };

  // Handle Analyze button - now calls AWS endpoint
  analyzeBtn.addEventListener('click', async () => {
    if (selectedFiles.length > 0) {
      // Show loading state with progress indication
      analyzeBtn.textContent = 'Analyzing...';
      analyzeBtn.disabled = true;
      analyzeBtn.classList.add('analyzing');
      
      // Add progress animation
      let progressDots = 0;
      const progressInterval = setInterval(() => {
        progressDots = (progressDots + 1) % 4;
        const dots = '.'.repeat(progressDots);
        analyzeBtn.textContent = `Analyzing${dots}`;
      }, 500);
      
      // Call AWS API
      const result = await callAwsAppraisalAPI(selectedFiles);
      
      // Clear progress animation
      clearInterval(progressInterval);
      
      // Handle the response
      handleApiResponse(result);
    }
  });

  // Function to clear session data for adding another jewelry item
  function clearAddAnotherItemSession() {
    // Clear current item session data but preserve jewelry items list
    sessionStorage.removeItem('uploadedImages');
    sessionStorage.removeItem('calculatedValues');
    sessionStorage.removeItem('appraisalResult');
    sessionStorage.removeItem('currentJewelryItemIndex');
    console.log('Cleared session data for adding another jewelry item');
  }

  // Check if we're coming from "Add another item" and clear relevant session data
  const urlParams = new URLSearchParams(window.location.search);
  const isAddingAnother = urlParams.get('add') === 'true' || document.referrer.includes('/pages/estimated-value');
  
  if (isAddingAnother) {
    clearAddAnotherItemSession();
  }

  // Initial render
  renderImages();
  
  // Show mock mode indicator if enabled
  if (USE_MOCK_API) {
    const mockIndicator = document.getElementById('mock-mode-indicator');
    if (mockIndicator) {
      mockIndicator.style.display = 'flex';
    }
  }

  // Modal functionality
  const uploadGuideLink = document.querySelector('.upload-guide-link');
  const modal = document.getElementById('upload-guide-modal');
  const modalCloseBtn = document.querySelector('.modal-close-btn');
  const gotItBtn = document.querySelector('.got-it-btn');
  const body = document.body;

  // Function to open modal
  const openModal = () => {
    modal.style.display = 'flex';
    modal.setAttribute('aria-hidden', 'false');
    body.style.overflow = 'hidden'; // Prevent body scroll
    
    // Add show class after a brief delay for smooth animation
    setTimeout(() => {
      modal.classList.add('show');
    }, 10);
    
    // Focus management for accessibility
    modalCloseBtn.focus();
  };

  // Function to close modal
  const closeModal = () => {
    modal.classList.remove('show');
    
    // Wait for animation to complete before hiding
    setTimeout(() => {
      modal.style.display = 'none';
      modal.setAttribute('aria-hidden', 'true');
      body.style.overflow = ''; // Restore body scroll
      uploadGuideLink.focus(); // Return focus to trigger element
    }, 300);
  };

  // Open modal when "See image upload guide" is clicked
  uploadGuideLink.addEventListener('click', (e) => {
    e.preventDefault();
    openModal();
  });

  // Close modal when close button is clicked
  modalCloseBtn.addEventListener('click', closeModal);

  // Close modal when "Got it!" button is clicked
  gotItBtn.addEventListener('click', closeModal);

  // Close modal when clicking outside the modal content
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Close modal when pressing Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('show')) {
      closeModal();
    }
  });

  // Trap focus within modal for accessibility
  const trapFocus = (e) => {
    const focusableElements = modal.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstFocusable = focusableElements[0];
    const lastFocusable = focusableElements[focusableElements.length - 1];

    if (e.key === 'Tab') {
      if (e.shiftKey) {
        // Shift + Tab
        if (document.activeElement === firstFocusable) {
          e.preventDefault();
          lastFocusable.focus();
        }
      } else {
        // Tab
        if (document.activeElement === lastFocusable) {
          e.preventDefault();
          firstFocusable.focus();
        }
      }
    }
  };

  // Add focus trap when modal is open
  modal.addEventListener('keydown', trapFocus);

  // Jewelry Limit Modal functionality
  const jewelryLimitModal = document.getElementById('jewelry-limit-modal');
  const jewelryLimitCloseBtn = document.querySelector('.jewelry-limit-close');
  const jewelryLimitCancelBtn = document.querySelector('.jewelry-limit-cancel-btn');
  const jewelryLimitReviewBtn = document.querySelector('.jewelry-limit-review-btn');

  // Close jewelry limit modal event listeners
  if (jewelryLimitCloseBtn) {
    jewelryLimitCloseBtn.addEventListener('click', hideJewelryLimitModal);
  }

  if (jewelryLimitCancelBtn) {
    jewelryLimitCancelBtn.addEventListener('click', hideJewelryLimitModal);
  }

  // Review jewelry button - redirect to estimated value page
  if (jewelryLimitReviewBtn) {
    jewelryLimitReviewBtn.addEventListener('click', () => {
      window.location.href = '/pages/estimated-value';
    });
  }

  // Close jewelry limit modal when clicking outside
  if (jewelryLimitModal) {
    jewelryLimitModal.addEventListener('click', (e) => {
      if (e.target === jewelryLimitModal) {
        hideJewelryLimitModal();
      }
    });
  }

  // Close jewelry limit modal on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && jewelryLimitModal && jewelryLimitModal.classList.contains('show')) {
      hideJewelryLimitModal();
    }
  });

  // Check jewelry limit on page load and show message if at limit
  const checkJewelryLimitOnLoad = () => {
    const jewelryCount = getJewelryItemsCount();
    if (jewelryCount >= MAX_JEWELRY_ITEMS) {
      // Disable the upload area
      uploadArea.style.pointerEvents = 'none';
      uploadArea.style.opacity = '0.6';
      
      // Update upload text to indicate limit reached
      const uploadText = uploadArea.querySelector('.upload-text');
      const uploadSubtitle = uploadArea.querySelector('.upload-subtitle');
      if (uploadText) {
        uploadText.textContent = 'Maximum jewelry limit reached (3/3)';
      }
      if (uploadSubtitle) {
        uploadSubtitle.textContent = 'You have reached the maximum of 3 jewelry items. Click "Review My Jewelry" to manage your items.';
      }
      
      // Add a notice or button to review jewelry
      if (!uploadArea.querySelector('.review-jewelry-notice')) {
        const reviewNotice = document.createElement('button');
        reviewNotice.className = 'review-jewelry-notice';
        reviewNotice.textContent = 'Review My Jewelry';
        reviewNotice.style.cssText = `
          margin-top: 16px;
          padding: 10px 20px;
          background-color: #d10077;
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 600;
          cursor: pointer;
          transition: background-color 0.2s ease;
          pointer-events: auto;
        `;
        reviewNotice.addEventListener('click', (e) => {
          e.preventDefault();
          window.location.href = '/pages/estimated-value';
        });
        reviewNotice.addEventListener('mouseover', () => {
          reviewNotice.style.backgroundColor = '#a3005a';
        });
        reviewNotice.addEventListener('mouseout', () => {
          reviewNotice.style.backgroundColor = '#d10077';
        });
        uploadArea.appendChild(reviewNotice);
      }
    }
  };

  // Run the check on page load
  checkJewelryLimitOnLoad();

  // Image Overlay functionality for reference images
  const imageOverlay = document.getElementById('image-overlay');
  const overlayImage = document.getElementById('overlay-image');
  const overlayCloseBtn = document.getElementById('image-overlay-close');
  const exampleImages = document.querySelectorAll('.example-item img');

  // Function to show image overlay
  const showImageOverlay = (imageSrc, imageAlt) => {
    overlayImage.src = imageSrc;
    overlayImage.alt = imageAlt;
    imageOverlay.classList.add('show');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
  };

  // Function to hide image overlay
  const hideImageOverlay = () => {
    imageOverlay.classList.remove('show');
    document.body.style.overflow = ''; // Restore scrolling
    // Clear image src after animation completes
    setTimeout(() => {
      if (!imageOverlay.classList.contains('show')) {
        overlayImage.src = '';
      }
    }, 300);
  };

  // Add click listeners to all example images
  exampleImages.forEach(img => {
    img.addEventListener('click', (e) => {
      e.preventDefault();
      showImageOverlay(img.src, img.alt);
    });
  });

  // Close overlay when close button is clicked
  if (overlayCloseBtn) {
    overlayCloseBtn.addEventListener('click', hideImageOverlay);
  }

  // Close overlay when clicking outside the image
  if (imageOverlay) {
    imageOverlay.addEventListener('click', (e) => {
      if (e.target === imageOverlay) {
        hideImageOverlay();
      }
    });
  }

  // Close overlay on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && imageOverlay.classList.contains('show')) {
      hideImageOverlay();
    }
  });
});
</script>